{"ast":null,"code":"var _jsxFileName = \"/home/kailayapathys/Downloads/oracleIntr/FE/src/outputView.js\";\nimport React from 'react';\n\nclass OutputView extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.formatSizesTableRow = this.formatSizesTableRow.bind(this);\n  }\n\n  formatSizesTableRow(sizeData) {\n    const {\n      batches,\n      units,\n      extra\n    } = sizeData;\n\n    if (!batches || batches === 0) {\n      if (!extra) {\n        return '0';\n      } else {\n        return React.createElement(\"p\", {\n          className: \"extra\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 18\n          },\n          __self: this\n        }, \"Extra: \", extra);\n      }\n    }\n\n    let extraText = '';\n\n    if (extra) {\n      extraText = `Extra: ${extra}`;\n    }\n\n    return React.createElement(React.Fragment, null, React.createElement(\"p\", {\n      className: \"batches\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    }, batches), \" X\", React.createElement(\"p\", {\n      className: \"units\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    }, units), extraText && React.createElement(\"p\", {\n      className: \"extra\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }, extraText));\n  }\n\n  render() {\n    const {\n      calculatedData,\n      onBackFromOutput\n    } = this.props;\n    const {\n      runs,\n      extra\n    } = calculatedData;\n    const formattedData = {};\n    const defaultRun = {\n      XS: {},\n      S: {},\n      M: {},\n      L: {},\n      XL: {},\n      XXL: {}\n    };\n    Object.keys(runs).map(index => {\n      const runData = runs[index];\n      formattedData[index] = { ...defaultRun\n      };\n      runData.map(sizeData => {\n        const {\n          units,\n          batches\n        } = sizeData;\n        formattedData[index][sizeData.size] = {\n          units,\n          batches,\n          extra: extra[index] && extra[index][sizeData.size] || 0\n        };\n      });\n    });\n    return React.createElement(\"div\", {\n      className: \"container-contact100\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"wrap-contact100\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      className: \"contact100-form validate-form\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"contact100-form-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, \"Total Cost Calculation - Output\"), React.createElement(\"table\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, React.createElement(\"thead\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, \"Run\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, \"XS\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, \"S\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, \"M\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, \"L\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, \"XL\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, \"XLL\"))), React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, Object.keys(formattedData).map(key => {\n      const sizeData = formattedData[key];\n      return React.createElement(\"tr\", {\n        key: key,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, key), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, this.formatSizesTableRow(sizeData['XS'])), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, this.formatSizesTableRow(sizeData['S'])), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, this.formatSizesTableRow(sizeData['M'])), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, this.formatSizesTableRow(sizeData['L'])), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, this.formatSizesTableRow(sizeData['XL'])), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, this.formatSizesTableRow(sizeData['XXL'])));\n    }))), React.createElement(\"div\", {\n      className: \"wrap-input100 validate-input bg1 center-repeat\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, \"Repeat Markers : \", calculatedData.rep_markers || 0)), React.createElement(\"div\", {\n      className: \"wrap-input100 validate-input bg1 center-repeat\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, \"Total Cost : \", calculatedData.cost || 0)), React.createElement(\"div\", {\n      className: \"container-contact100-form-btn\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: onBackFromOutput,\n      className: \"contact100-form-btn\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, \"Calculate Again\", React.createElement(\"i\", {\n      className: \"fa fa-long-arrow-right m-l-7\",\n      \"aria-hidden\": \"true\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    })))))));\n  }\n\n}\n\nexport default React.memo(OutputView);","map":{"version":3,"sources":["/home/kailayapathys/Downloads/oracleIntr/FE/src/outputView.js"],"names":["React","OutputView","PureComponent","constructor","props","formatSizesTableRow","bind","sizeData","batches","units","extra","extraText","render","calculatedData","onBackFromOutput","runs","formattedData","defaultRun","XS","S","M","L","XL","XXL","Object","keys","map","index","runData","size","key","rep_markers","cost","memo"],"mappings":"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","sourcesContent":["import React from 'react';\n\nclass OutputView extends React.PureComponent {\n\n    constructor(props) {\n        super(props);\n\n\n        this.formatSizesTableRow = this.formatSizesTableRow.bind(this);\n    }\n\n    formatSizesTableRow(sizeData) {\n        const { batches, units, extra } = sizeData;\n        if (!batches || batches === 0) {\n            if (!extra) {\n                return '0'\n            } else {\n                return (<p className=\"extra\">Extra: {extra}</p>)\n            }\n        } \n\n        let extraText = '';\n        if (extra) {\n            extraText = `Extra: ${extra}`\n        }\n        return (\n            <>\n                <p className=\"batches\">{batches}</p> X\n                <p className=\"units\">{units}</p>\n                {extraText && <p className=\"extra\">{extraText}</p>}\n            </>\n        )\n    }\n\n    render() {\n\n        const { calculatedData, onBackFromOutput } = this.props;\n\n        const { runs, extra } = calculatedData;\n        const formattedData = {};\n        const defaultRun = {\n            XS: {},\n            S: {},\n            M: {},\n            L: {},\n            XL: {},\n            XXL: {}\n        }\n        Object.keys(runs).map(index => {\n            const runData = runs[index];\n            formattedData[index] = {...defaultRun};\n            runData.map(sizeData => {\n                const { units, batches } = sizeData;\n                formattedData[index][sizeData.size] = {\n                    units,\n                    batches,\n                    extra: extra[index] && extra[index][sizeData.size] || 0\n                };\n            })\n\n        })\n\n        return (\n            <div className=\"container-contact100\">\n                <div className=\"wrap-contact100\">\n                    <form className=\"contact100-form validate-form\">\n                        <span className=\"contact100-form-title\">\n                            Total Cost Calculation - Output\n                        </span>\n\n                        <table>\n                            <thead>\n                                <tr>\n                                <th>Run</th>\n                                <th>XS</th>\n                                <th>S</th>\n                                <th>M</th>\n                                <th>L</th>\n                                <th>XL</th>\n                                <th>XLL</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                \n                                {Object.keys(formattedData).map((key) => {\n                                    const sizeData = formattedData[key];\n                                    return (\n                                        <tr key={key}>\n                                            <td>{key}</td>\n                                            <td>{this.formatSizesTableRow(sizeData['XS'])}</td>\n                                            <td>{this.formatSizesTableRow(sizeData['S'])}</td>\n                                            <td>{this.formatSizesTableRow(sizeData['M'])}</td>\n                                            <td>{this.formatSizesTableRow(sizeData['L'])}</td>\n                                            <td>{this.formatSizesTableRow(sizeData['XL'])}</td>\n                                            <td>{this.formatSizesTableRow(sizeData['XXL'])}</td>\n                                        </tr>\n                                    )\n                                })}\n                            </tbody>\n                            </table>\n\n\n\n                        <div className=\"wrap-input100 validate-input bg1 center-repeat\">\n                            <h3>Repeat Markers : {calculatedData.rep_markers || 0}</h3>\n                        </div>\n\n                        <div className=\"wrap-input100 validate-input bg1 center-repeat\">\n                            <h3>Total Cost : {calculatedData.cost || 0}</h3>\n                        </div>\n\n                        <div className=\"container-contact100-form-btn\">\n                            <button onClick={onBackFromOutput} className=\"contact100-form-btn\">\n                                <span>\n                                    Calculate Again\n                                    <i className=\"fa fa-long-arrow-right m-l-7\" aria-hidden=\"true\"></i>\n                                </span>\n                            </button>\n                        </div>\n\n                    </form>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default React.memo(OutputView);"]},"metadata":{},"sourceType":"module"}